System.Net.Http <= 命名空間
    類別
        HttpClient
            提供類別傳送 Http 要求，並從 URL 所識別的資源接收 Http 回應
System.Threading.Tasks
    提供型別，主要型別為 Task(表示可等待和取消的非同步作業)、Task<TResult>(可傳回的工作)
    類別
        Task<TResult>
            表示可傳回值的非同步操作
IPAddress
    (https://learn.microsoft.com/zh-tw/dotnet/api/system.net.ipaddress?view=net-8.0)
    提供網際網路通訊協定 (IP) 位址 (包含 IP 網路上的電腦位址)
    方法
        MapToIPv4
            將 IPAddress 物件轉換成 IPv4 address
Logging
    ASP.NET內建，在應用程式中紀錄使用行為、例外事件的訊息
    ex
        public class LoggingController{
            // 注入 DI
            private readonly ILogger<LoggingController> _logger;
            public LoggingController(ILogger<LoggingController> logger){
                _logger = logger;
            }
        }
        public ActionResult<string> Get(){ <= 表示動作的方法
            // LogWarning 是 Logger 方法
            _logger.LogWarning("LogginSample in")
            return "Loggin Page"
        }
    方法
        LogWarning
            格式化並寫入警告紀錄訊息，訊息可以放 String、Object、EventId 等
Dapper
    將資料表對應到類別並轉換成物件，便於用強型別做開發，還有可字寫 SQL 語法調整係為操作
    QueryMultipleAsync
        可以一次查詢多個結果，減少請求資料庫的次數，請求到的資料會被封裝到 GridRead 物件中
        ex
            string = @"SELECT name FROM dbo.name"
            .QueryMultipleAsync("sql語法", parameters);
        方法
            Read
                透過 Read 可以將封裝到 GridRead 裡面的物件取出，Read 也可以用 <T> 帶入
IApplicationDbContext
    1.DbContext 存留期
        DbContext 會與資料庫進行互動，在執行個體與個體被處置時結束
        在一個"單一"的工作單位使用
            1.建立 DbContext
            2.追蹤實體執行個體變更
            3.呼叫 SaveChanges or SaveChangesAsync 寫入資料庫
    2.初始化 DbContext
        1.使用 new 建立 DbContext 執行個體
        2.使用 DI 注入到 ASP.NET Core 裡面
IDictionary
    表示將索引鍵/值組的泛型集合
    IDictionary<TKey,TValue>
    ex
        IDictionary<string,object> = { key:obj }
First
    回傳第一個值，如果沒有值，會回傳異常
FirstOrDefault
    回傳第一個值，如果沒有救回傳預設值
    預設值
        1.引用類型
            default => null
        2.值類型
            int => 0
            double => 0.0
            bool => false
internal
    存取限於目前組件
GetSummaryRequest
    用在 Http request 上
DynamicParameter
    設置參數
        可以直接設定參數
        direction
            ParameterDirection.Input
                表示該參數是輸入參數，從應用程式傳輸到資料庫的值
            ParameterDirection.Ouput
                表示該參數是輸出參數，從資料庫傳輸到應用程式的值
            ParameterDirection.InputOuput
                表示該參數可以是輸入也可以是輸出
        dbType
            指定參數的資料類型，可以指定為 DbType 中一個資料類型
            ex
                DbType.Int32
Pagination

DateTime
    以一天的時間和日期表示
    方法
        ToLocalTime
            將 DateTime 物件轉換為本地時間
List<T>
    屬性
        Count
            可以計算 List<T> 裡面的項目數量
FormatResultModel
常見
    ApiControllerBase 繼承 ControllerBase 

其他
    IsConsumed
        reader 會繼承 IDataReader，而 NextResult() 在裡面，所以會透過 reader.NextResult() 去觸發
        讓 IsConsumed 變成 false，所以大部分都為 true，如果 reader.NextResult = false 時，會釋放
        記憶體
        ex
            private void NextResult(){
                if(reader.NextResult()){ <= 判斷是否還有資料
                    readCount ++;
                    gridIndex ++;
                    IsConsumed = false;
                }else{ <= 當沒有資料了釋放記憶體
                    reader.Dispose();
                    reader = null;
                    callbacks?.OnCompleted();
                    Dispose();
                }
            }
    as
        可以強制轉型
    ??
        Null 運算子，他會判斷參數是否為 null
        ex
            string name = null
            string Hello = "Hello"
            string sayHi = name ?? Hello // Hello，因為 name 是空值
    $""
        用於在字符串中嵌入變數或表達式的值
        ex
            var a = new { name = "John"}
            string result = $"{a.name}" // John
    JWT 驗證
        裡面有包含三部分
        一、Header
            是一個 JSON 物件，裡面會有兩個屬性
                1.alg 表示使用的加密算法
                2.typ 表示類型，usually setting "JWT"
            ex
                Header = {
                    "alg":"HS256",
                    "typ":"JWT"
                }
        二、Payload
            是一個 JSON 物件，可包含"自定義的屬性"，像客戶基本資料就是放在 Payload 的部分
            還有一些內建屬性可使用(也可以自定屬性)
                1.iss JWT 的發行者
                2.sub JWT 的主題，表示 JWT 代表的實體(通常為使用者)
                3.aud JWT 接收者，表示 JWT 可被誰使用
                4.exp JWT 過期的時間，過期的 JWT 不能再使用
                5.nbf JWT 生效時間，表示何時 JWT 生效
                6.iat JWT 發行時間
                7.jti JWT 唯一標識符，防止 JWT 被重複使用
            ex
                Payload = {
                    "sub":"123456789",
                    "name":"John Doe",
                    "iat":1516239022
                }
        三、Signature
            是一個對 Header 和 Payload 進行數字簽名的結果
            ex
                HMACSHA256(
                    base64UrlEncode(header) + "." + <= header 和 payload 中間會使用 "." 來連接
                    base64UrlEncode(payload),
                    'your-256-bit-secret'    <= 這是存放在伺服器的自定義私鑰
                )
                這三個部分接在一起後的字串進行加密演算法進行加密簽名(簽名的計算方式會根據不同的加密算法而不同)
        簡單授權
            介紹(https://learn.microsoft.com/zh-tw/aspnet/core/security/authorization/simple?view=aspnetcore-8.0)
            [Authorize] 只有已驗證使用者能存取該元件(包含控制器、動作、Razor Page)
                ex
                    [Authorize] <= 只有已驗證使用者可以存取
                    public class AccountController : Controller
                    {
                        public ActionResult Login()
                        {
                        }

                        public ActionResult Logout()
                        {
                        }
                    }
            [AuthorizeAttribute] 只有已驗證使用者能存取該元件(動作)
                ex
                    public class AccountController : Controller
                    {
                        public ActionResult Login()
                        {
                        }

                        [Authorize] <= 只有已驗證才能存取 Logout
                        public ActionResult Logout()
                        {
                        }
                    }
            [AllowAnonymous] 允許未驗證的使用者存取個別動作
                ex
                    [Authorize] <= 如要存取整個 Controller 就需要驗證
                    public class AccountController : Controller
                    {
                        [AllowAnonymous] <= 這裡不需驗證就可以存取
                        public ActionResult Login()
                        {
                        }

                        public ActionResult Logout()
                        {
                        }
                    }
    React
        動態載入元件
            lazy
                Babel 會把 lazy() 引入的元件，在打包時拆成一個獨立的 JS 檔案，並且只有在第一次渲染時，才會引入該元件渲染
                ex
                    const "元件" = React.lazy(()=> import("檔案相對路徑"))
            Suspense
                React 提供的特殊元件，當"目標元件"還沒載入完成時，React 會一直顯示 fallback 這個綁定的讀取元件，直到目標元件讀取完成
            ex
                import React,{ lazy, Suspense } from 'react'
                const InputForm = lazy(()=>import('../component/InputForm'))
                // 這裡會先使用讀取元件(進度條 or 轉圈圈)
                const FormPage = () =>{
                    return <Suspense fallback={<div>Loading...</div>}>
                                <InputForm />
                            </Suspense>;
                }
                export default FormPage
        useSelect
            Redux 的 hook，他會從 store 取出資料給元件使用
共通點
    RPTWeb
        1.POST 會帶入 request 參數，GET 則不需要
        2.無論是 POST 或 GET 執行完後都會回傳成功或失敗
        3.元件動作都會加入 [AllowAnonymous] 表示不需驗證也能存取

Dashboard